* make the palette be stored per-level and be set in editLayer when the level changes
* palette button
	<http://en.wikipedia.org/wiki/List_of_videogame_consoles_palettes>
	* choose colour to draw with
	* choose palette (NES or Atari 2600)
--- RELEASE + ask people to make levels ---
* clicking on the portal - edit box [name, level, portal]
* name of current level in the top right corner
* add chat box
	* /help command
	* /new command with location name
	* /teleport command with location
	* /quit command
	* /help command
* implement dying - fade then zap to last platform
* graphics for edit buttons
--- RELEASE ---
Do first minigame content

Bugs
----
* props should stay within max level size
* don't allow zero sized props

Server Side
-----------
> level serialising
> write unused levels to disk
> version management - send client version number

Later
-----
* edit mode menu
	* new things
		+ platform
		+ portal
		+ item
	* edit things
		+ delete
		+ move
		> clone
	* graphics things
		+ draw
		* fill
		> line
		> rectangle
	* palette button
		* choose color
		* select palette
	> other
		> undo
> new prop type that you don't hit for 'foreground' stuff
> zooming
* palettes and palette mapping code
	<http://en.wikipedia.org/wiki/8-bit_color>
	<http://en.wikipedia.org/wiki/List_of_8-bit_computer_hardware_palettes> 
		> Apple II
		> C-64
		> ZX Spectrum
		> MSX
		> CGA
	<http://en.wikipedia.org/wiki/List_of_videogame_consoles_palettes>
		* Atari 2600
		* NES
		> Sega Master System

done
----
+ switching between levels makes the transparency fail
+ use 8 bit palette
+ use transparent colour
+ make props transparent by default
+ bug: props all get the same ID
+ fill button
+ clone button
+ move buttons closer together
+ 'sliding bitmap' bug
+ fix propagation of mouse clicks through buttons in edit mode
+ make object collection not delete the object from level, but just flag it hidden
+ graphics for player animations
+ add bitmap to level
+ joystick control
+ add bitmap to props
+ add bitmap image to
	+ portal
	+ platform
	+ item
+ optimise graphics - culling
+ server emulation - save to disk but using everything farmed out into a proxy class
+ implement maximum falling speed
